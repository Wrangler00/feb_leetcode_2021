Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. You can return the output in any order.

 

Example 1:

Input: S = "a1b2"
Output: ["a1b2","a1B2","A1b2","A1B2"]
Example 2:

Input: S = "3z4"
Output: ["3z4","3Z4"]
Example 3:

Input: S = "12345"
Output: ["12345"]
Example 4:

Input: S = "0"
Output: ["0"]
 

Constraints:

S will be a string with length between 1 and 12.
S will consist only of letters or digits.


//cpp my recursive solution

class Solution {
    string s;
    int len;
public:
    vector<string> transform(int i){
        if(i>=len)  return {""};
        
        vector<string> tmp = transform(i+1);
        vector<string> res;
        
        for(auto &v:tmp){
            if(isdigit(s[i])){
                res.push_back(string(1,s[i])+v);
            }else{
                res.push_back(string(1,tolower(s[i]))+v);
                res.push_back(string(1,toupper(s[i]))+v);
            }
        }
        
        return res;
    }
    vector<string> letterCasePermutation(string S) {
        s=S;
        len = s.length();
        return transform(0);
    }
};
