Given an undirected graph, return true if and only if it is bipartite.

Recall that a graph is bipartite if we can split its set of nodes into two independent subsets A and B, such that every edge in the graph has one node in A and another node in B.

The graph is given in the following form: graph[i] is a list of indexes j for which the edge between nodes i and j exists. Each node is an integer between 0 and graph.length - 1. There are no self edges or parallel edges: graph[i] does not contain i, and it doesn't contain any element twice.

 

Example 1:


Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can divide the vertices into two groups: {0, 2} and {1, 3}.

Example 2:


Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: We cannot find a way to divide the set of nodes into two independent subsets.
 

Constraints:

1 <= graph.length <= 100
0 <= graph[i].length < 100
0 <= graph[i][j] <= graph.length - 1
graph[i][j] != i
All the values of graph[i] are unique.
The graph is guaranteed to be undirected. 

//cpp my solution using hint from geeksforgeeks

class Solution {
    vector<int> mp;
    vector<vector<int>> graph;
public:
    bool theBfs(int src){
        queue<pair<int,int>> bfs;
        
        bfs.push(make_pair(src,1));
        
        while(!bfs.empty()){
            pair<int,int> p = bfs.front();
            int node = p.first;
            int col = p.second;
            
            bfs.pop();
            
            for(auto &v:graph[node]){
                if(mp[v] == col)
                    return false;
                else if(!mp[v]){
                    bfs.push({v,(col%2)+1});
                    mp[v] = (col%2)+1;
                }
            }
        }
        
        return true;
    }
    bool isBipartite(vector<vector<int>>& g) {
        graph = g;
        mp = vector<int>(graph.size(),0);
        
        for(int i=0;i<g.size();i++) if(!mp[i] && !theBfs(i))    return false;
        return true;
    }
};
